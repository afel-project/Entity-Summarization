package org.battelle.clodhopper;

import java.util.List;
import java.util.concurrent.ExecutionException;

import org.battelle.clodhopper.task.AbstractTask;

/*=====================================================================
 * 
 *                       CLODHOPPER CLUSTERING API
 * 
 * -------------------------------------------------------------------- 
 * 
 * Copyright (C) 2013 Battelle Memorial Institute 
 * http://www.battelle.org
 * 
 * -------------------------------------------------------------------- 
 * 
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 * 
 * -------------------------------------------------------------------- 
 * *
 * AbstractClusterer.java
 *
 *===================================================================*/
public abstract class AbstractClusterer extends AbstractTask<List<Cluster>>
    implements Clusterer {

    protected AbstractClusterer() {
    }

    @Override
    /**
     * Returns the clusters generated by this clusterer if clustering has run to
     * completion successfully. Otherwise, this method returns null. This method
     * should only be called after ascertaining that the clusterer has finished
     * with an outcome of TaskOutcome.SUCCESS. The purpose of this method is to
     * provide an alternative to <code>get()</code> which does not have to be
     * enclosed in a try-catch clause.
     */
    public List<Cluster> getClusters() {
        List<Cluster> clusters = null;
        try {
            clusters = get();
        } catch (InterruptedException e) {
        } catch (ExecutionException e) {
        }
        return clusters;
    }
}
